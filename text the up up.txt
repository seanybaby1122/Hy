import networkx as nx
import matplotlib.pyplot as plt

# Numeric Mapping System (A-Z â†’ 1-9 looping)
def letter_to_numeric(letter):
    return (ord(letter) - 65) % 9 + 1  # Maps A=1, B=2 ... I=9, J=1, K=2 ...

# Function to process words and acronyms, calculating numeric sums and letter counts
def process_text(text_list):
    results = {}
    for text in text_list:
        numeric_sum = sum(letter_to_numeric(char) for char in text)
        letter_count = len(text)
        results[text] = {"numeric_sum": numeric_sum, "letter_count": letter_count}
    return results

# Define node categories
letters = [chr(i) for i in range(65, 91)]  # A-Z
vowels = ['A', 'E', 'I', 'O', 'U']
acronyms = ["DATA", "AI", "ML", "NLP", "FIVE", "F", "I", "V", "E"]  # Added "FIVE" to test
transformation_states = ["D", "DT", "A", "T", "ATA"]

# Initialize directed graph
G = nx.DiGraph()

# Add nodes with numeric mappings
for letter in letters:
    G.add_node(letter, type='letter', numeric_value=letter_to_numeric(letter))

for vowel in vowels:
    G.add_node(vowel, type='vowel', numeric_value=letter_to_numeric(vowel))

for acronym in acronyms:
    G.add_node(acronym, type='acronym')

for state in transformation_states:
    G.add_node(state, type='state')

# Define transformation rules with dynamic weights (to be refined by AI later)
edges = [
    ('D', 'A', 1.2), ('A', 'T', 1.1), ('T', 'A', 1.3),
    ('D', 'T', 1.0), ('T', 'D', 1.0),
    ('DATA', 'D', 1.5), ('DATA', 'DT', 1.4), ('DT', 'T', 1.2),
    ('FIVE', 'F', 1.0), ('FIVE', 'I', 1.0), ('FIVE', 'V', 1.0), ('FIVE', 'E', 1.0) # Added edges for 'FIVE'
]

# Add edges with weight
for edge in edges:
    G.add_edge(edge[0], edge[1], weight=edge[2])

# Process acronyms and words
text_data = acronyms + transformation_states
text_results = process_text(text_data)

# Print the results
for text, data in text_results.items():
    print(f"{text}: Numeric Sum = {data['numeric_sum']}, Letter Count = {data['letter_count']}")

# Graph Visualization
pos = nx.spring_layout(G, seed=42)
node_colors = ['blue' if G.nodes[node]['type'] == 'letter' else 
               'red' if G.nodes[node]['type'] == 'vowel' else 
               'green' if G.nodes[node]['type'] == 'acronym' else 
               'purple' for node in G.nodes]

edge_weights = [G[u][v]['weight'] for u, v in G.edges]

nx.draw(G, pos, with_labels=True, node_color=node_colors, node_size=700, 
        font_size=10, font_color='white', edge_color='gray', width=edge_weights)
plt.title("Optimized Vowel-Operator Graph with Numeric Mapping")
plt.show()

Explanation:
 * letter_to_numeric(letter): This function converts a letter to a number between 1 and 9, looping through the alphabet.
 * process_text(text_list): This function takes a list of strings (words or acronyms), calculates the numeric sum of their letters, and counts the number of letters.
 * Graph Construction:
   * Creates a directed graph (nx.DiGraph()).
   * Adds letter, vowel, acronym, and transformation state nodes.
   * Adds edges with weights, including edges related to the word "FIVE".
 * Processing and Printing:
   * Processes the acronyms and transformation states using process_text().
   * Prints the numeric sums and letter counts.
 * Graph Visualization:
   * Visualizes the graph using NetworkX and Matplotlib.
To run this code:
 * Install Libraries: If you haven't already, install NetworkX and Matplotlib:
   pip install networkx matplotlib

 * Copy and Run: Copy the code into a Python file (e.g., graph_analysis.py) and run it:
   python graph_analysis.py